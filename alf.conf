#a

awatch: watch $(alf which $@)

#b

beep: echo -e '\a'

#c

cats: highlight --line-numbers --line-number-length=3 --line-length=75 --wrap-simple --wrap-no-numbers --out-format=ansi --force

# cd to next/prev sibling
cdnext: cd ../"$(ls -F .. | grep '/' | grep -A1 -xF "${PWD##*/}/" | tail -n 1)"
cdprev: cd ../"$(ls -F .. | grep '/' | grep -B1 -xF "${PWD##*/}/" | head -n 1)"

compare-dir: diff --brief -Nr 

# Count files in folder. Folder name is optional
count: ls -1 ${1:-.} | wc -l

#d

# d: docker
#   b: build -t ${1:-temp} .
#   clean: system prune -f
#   deploy: stack deploy -c $1.yml $1
#   df: system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}\t{{.Reclaimable}}"
#   i: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
#   images: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
#   m: !docker-machine
#   machine: !docker-machine
#   n: network
#   ps: ps --format "{{.ID}} {{.Names}}\t{{.Status}}  {{.Ports}}"
#   r: run -it --rm 
#   replicas: service ls --format='table {{.Name}}\t{{.Mode}}\t{{.Replicas}}'
#   rmi: images --format "{{.Repository}}:{{.Tag}}" |grep $1 | xargs docker rmi -f
#   rmv: volume ls --format "{{.Name}}" |grep $1 |xargs docker volume rm -f
#   s: service
#   size: images --format '{{.Size}}\t{{.Repository}}:{{.Tag}}' | sort -h | column -t
#   st: stack
#   stats: stats --format "{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
#   unzip: load -i $1.tar.gz
#   v: volume
#   vls: volume ls | grep -i
#   zip: save $1 | gzip > $2.tar.gz

decrypt: gpg2 -d
  forget: !echo RELOADAGENT | gpg-connect-agent

dfh: df -h |grep "sd\|vd"

diagram: dot "$1" -Tpng -o "${1%.dot}.png"

dif: diff -u --color

dirfind: sudo find . -maxdepth ${2:-3} -type d -name "*$1*"

dns: host -t ${2:-ns} $1
  flush: !sudo systemd-resolve --flush-caches
  stats: !sudo systemd-resolve --statistics
  --flush: !dns flush && dns
  help: !echo -e "Usage:\n  dns example.com\n  dns example.com mx\n  dns --flush example.com\n  dns flush\n  dns stats"

#e

encrypt: gpg2 -c

#f

f: find |grep
fd: fd --hidden --exclude .git
fingerprint: ssh-keygen -E md5 -lf

#g

# g: git
#   # basic
#   b: branch
#   c: add . --all && git commit -am
#   d: diff --unified=0
#   m: merge
#   p: push
#   s: status
#   co: checkout
#   pl: pull

#   # commonly used
#   cl: changelog
#   new: checkout -b
#   chmod: update-index --chmod 
#   retag: tag $1 -f && (git push origin --delete $1 || true) && git push origin $1
#   discard: checkout -- . ; git clean -fd
#   remote-delete: push origin --delete
#   rebuild: commit --allow-empty -m "trigger rebuild" ; git push
#   rename: branch -m
#   rollback: diff --binary HEAD $1 | git apply
#   unstash: stash pop

#   # log related
#   l: log --all --graph --date=relative --pretty=format:'%h %Cgreen%ad%Creset %Cblue%an%Creset%n        %s%n       %C(auto)%d%Creset'
#   ll: log --graph --oneline --decorate --all
#   tail: log -${1:-5} --all --date=relative --pretty=format:'%h %Cgreen%ad%Creset %x09%Cblue%s%Creset'
#   datelog: log --pretty=format:'%C(cyan)%h %C(magenta)%ad %C(blue)%an%Creset%x09%s' --date=short
#   history: log -p

#   # less commonly used
#   ls: ls-tree --full-name --name-only -r HEAD
#   compare: diff --stat --color $1..HEAD
#   # optimize: repack -ad && sleep 4 && git gc --aggressive --prune=now
#   resolve-ours: checkout --ours . ; git add -u ; git commit -m 'resolve conflicts with --ours'
#   resolve-theirs: checkout --theirs . ; git add -u ; git commit -m 'resolve conflicts with --theirs'
#   shallow-clone: clone --depth 1
#   upstream: checkout master && git fetch upstream && git merge upstream/master
#   tagsha: show-ref --abbrev=7 --tags
#   sha: rev-parse --short HEAD

#   # show age of all git repos in subdirectories
#   age: !for d in ./*/; do echo -e "\n\e[34m$d\e[0m" ; git -C $d log -1 --all --date=relative --pretty=format:'%Cgreen%ad%Creset %x09%s%n' ; done;

geoip: curl http://ip-api.com/line/$1

# GitHub API - example usage: github /user/repos
github: curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" https://api.github.com$1

#h

hk: heroku

https: http ${@:1:$((${#@}-1))} https://${@: -1}

#i

#j

# Create animated gif - delay parameter is optional
jpg2gif: convert -delay ${1:-300} -loop 0 *.jpg animated.gif

#k

k: kubectl

#l

l: ls -lh
ll: ls -lah

# less: less -Sr Do we need this?

#m
myip: curl -s http://ipecho.net/plain; echo
#n

nv: env |grep -i

#o

#p

# List installed perl modules
perlmod: perl -MFile::Find=find -MFile::Spec::Functions -Tlwe 'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, no_chdir => 1 }, @INC'

# Create animated gif - delay parameter is optional
png2gif: convert -delay ${1:-300} -loop 0 *.png animated.gif

port: sudo lsof -i :$1

ports: sudo netstat -tulpn | grep LISTEN |grep -Po '(?<=:)(\d{2,5})' |sort -n  |uniq |tr '\n' '\t'

psf: ps -ef |grep 

pt: papertrail
ppt: PAPERTRAIL_API_TOKEN=$PERSONAL_PAPERTRAIL_API_TOKEN pt

pf: echo "port-forward to where?"
  webapi-db: !ssh -v -NL 54321:webapi.rds.wefar.io:5432 bastion.production
  dev-webapi: !kubectl port-forward -n develop service/webapi 8081:8080
  qa-webapi: !kubectl port-forward -n qa service/webapi 8081:8080
  prod-webapi: !kubectl port-forward -n production service/webapi 8081:8080

#r

redis: redis-cli

# repeat 5 echo hello
repeat: for i in `seq $1`; do ${@:2} ; done

repo-info: curl -s https://api.github.com/repos/dannyben/$1 | jq '{name: .full_name, forks: .forks_count, stars: .stargazers_count, watchers: .watchers_count, issues: .open_issues_count, subscribers: .subscribers_count}'

#s

search: grep -ri

senderscore: echo $1 | awk -F . '{print $4"."$3"."$2"."$1".score.senderscore.com"}' | xargs -I{} dig a {} +short | xargs -I{} echo {} | cut -d . -f 4

slurp: wget --recursive --no-clobber --level=${2:-10} --page-requisites --adjust-extension --convert-links --restrict-file-names=windows --no-parent http://$1

sshconf: $EDITOR ~/.ssh/config

ssh-testkey: ssh-keygen -t rsa -C "bobbo@henna.com" -f id_rsa -N ''

sslyze: docker run --rm -it nablac0d3/sslyze

#t

# tracert: sudo traceroute -I 
tracert: mtr

#u

uml: java -jar /vagrant/java/plantuml/plantuml.jar

#v

vir: vi -R

#w

what: alf which

# open any command in a new tmux window or pane
ww: tmux new-window
ws: tmux split-window

#y

y2mp3: youtube-dl --extract-audio --audio-format mp3 "$@"
ytop: ytop --colorscheme default-dark
 

